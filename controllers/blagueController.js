const { Op } = require('sequelize');

module.exports = (Blague) => {
    // --- Fonctions du Contr√¥leur ---
    // Chaque fonction correspond √† une action (un cas d'utilisation) de notre API.
    // Elles sont 'async' car les op√©rations avec la base de donn√©es prennent du temps.

    /**
     * @description Ajoute une nouvelle blague √† la base de donn√©es.
     * @param {object} req - L'objet de la requ√™te Express, contient les donn√©es envoy√©es par le client (req.body).
     * @param {object} res - L'objet de la r√©ponse Express, utilis√© pour renvoyer des donn√©es au client.
     */
    const ajouterBlague = async (req, res) => {
        console.log('üìù Tentative d\'ajout d\'une nouvelle blague...');
        // On utilise un bloc try...catch pour g√©rer les erreurs qui pourraient survenir lors de l'interaction avec la BDD.
        try {
            // On extrait 'contenu' et 'auteur' du corps de la requ√™te. C'est le JSON envoy√© par le client.
            const { contenu, auteur } = req.body;
            
            // Validation simple : on v√©rifie que le contenu de la blague n'est pas vide.
            if (!contenu) {
                console.log('‚ùå Contenu manquant');
                return res.status(400).json({ // On renvoie une erreur 400 (Bad Request).
                    success: false,
                    message: 'Le contenu de la blague est requis'
                });
            }

            // On utilise la m√©thode 'create' de notre mod√®le Sequelize pour ins√©rer une nouvelle ligne dans la table 'Blagues'.
            const nouvelleBlague = await Blague.create({
                contenu,
                auteur: auteur || 'Anonyme' // Si aucun auteur n'est fourni, on met 'Anonyme' par d√©faut.
            });

            console.log('‚úÖ Nouvelle blague ajout√©e');
            // On renvoie une r√©ponse de succ√®s (201 - Created) avec la blague qui vient d'√™tre cr√©√©e.
            res.status(201).json({
                success: true,
                message: 'Blague ajout√©e avec succ√®s',
                data: nouvelleBlague
            });
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'ajout de la blague:', error);
            // Si une erreur se produit, on renvoie une erreur 500 (Internal Server Error).
            res.status(500).json({
                success: false,
                message: 'Erreur interne du serveur',
                error: error.message
            });
        }
    };

    /**
     * @description R√©cup√®re toutes les blagues de la base de donn√©es.
     */
    const consulterToutesBlagues = async (req, res) => {
        console.log('üîç Tentative de r√©cup√©ration de toutes les blagues...');
        try {
            // On utilise la m√©thode 'findAll' pour r√©cup√©rer toutes les lignes de la table.
            // On les trie par date de cr√©ation, de la plus r√©cente √† la plus ancienne.
            const blagues = await Blague.findAll({
                order: [['date_creation', 'DESC']]
            });

            console.log(`‚úÖ ${blagues.length} blagues trouv√©es`);
            
            // On renvoie la liste des blagues dans la r√©ponse.
            res.json({
                success: true,
                count: blagues.length,
                data: blagues
            });
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des blagues:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur interne du serveur',
                error: error.message
            });
        }
    };

    /**
     * @description R√©cup√®re une seule blague par son ID.
     */
    const consulterBlagueParId = async (req, res) => {
        try {
            // On r√©cup√®re l'ID depuis les param√®tres de l'URL (ex: /api/blagues/3).
            const { id } = req.params;
            
            // 'findByPk' est une m√©thode pratique pour trouver une entr√©e par sa cl√© primaire (Primary Key).
            const blague = await Blague.findByPk(id);
            
            // Si aucune blague ne correspond √† cet ID, on renvoie une erreur 404 (Not Found).
            if (!blague) {
                return res.status(404).json({
                    success: false,
                    message: 'Blague non trouv√©e'
                });
            }

            // Si on la trouve, on la renvoie.
            res.json({
                success: true,
                data: blague
            });
        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration de la blague:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur interne du serveur',
                error: error.message
            });
        }
    };

    /**
     * @description R√©cup√®re une blague au hasard.
     */
    const consulterBlagueAleatoire = async (req, res) => {
        console.log('üé≤ Tentative de r√©cup√©ration d\'une blague al√©atoire...');
        try {
            // Pour obtenir une blague al√©atoire en SQLite, on ruse un peu.
            // 1. On compte combien il y a de blagues au total.
            const count = await Blague.count();
            if (count === 0) {
                return res.status(404).json({
                    success: false,
                    message: 'Aucune blague disponible'
                });
            }

            // 2. On g√©n√®re un index (une position) al√©atoire entre 0 et le nombre total de blagues.
            const randomIndex = Math.floor(Math.random() * count);

            // 3. On demande √† la BDD de nous donner une seule blague en sautant les 'randomIndex' premi√®res.
            const blague = await Blague.findOne({ offset: randomIndex });

            if (!blague) { // Juste une s√©curit√© au cas o√π.
                return res.status(404).json({
                    success: false,
                    message: 'Aucune blague disponible'
                });
            }

            console.log('‚úÖ Blague al√©atoire trouv√©e');
            res.json({
                success: true,
                data: blague
            });
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration de la blague al√©atoire:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur interne du serveur',
                error: error.message
            });
        }
    };

    /**
     * @description Met √† jour une blague existante.
     */
    const mettreAJourBlague = async (req, res) => {
        console.log('üîÑ Tentative de mise √† jour d\'une blague...');
        try {
            const { id } = req.params;
            const { contenu, auteur } = req.body;
            // D'abord, on r√©cup√®re la blague √† modifier.
            const blague = await Blague.findByPk(id);

            if (!blague) {
                return res.status(404).json({
                    success: false,
                    message: 'Blague non trouv√©e'
                });
            }

            // On met √† jour les champs de l'objet 'blague' avec les nouvelles donn√©es.
            // Si une nouvelle valeur est fournie, on l'utilise, sinon on garde l'ancienne.
            blague.contenu = contenu || blague.contenu;
            blague.auteur = auteur || blague.auteur;
            // On utilise la m√©thode 'save' pour enregistrer les modifications en BDD.
            await blague.save();

            console.log('‚úÖ Blague mise √† jour avec succ√®s');
            res.json({
                success: true,
                message: 'Blague mise √† jour avec succ√®s',
                data: blague
            });
        } catch (error) {
            console.error('‚ùå Erreur lors de la mise √† jour de la blague:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur interne du serveur',
                error: error.message
            });
        }
    };

    /**
     * @description Supprime une blague.
     */
    const supprimerBlague = async (req, res) => {
        console.log('üóëÔ∏è Tentative de suppression d\'une blague...');
        try {
            const { id } = req.params;
            const blague = await Blague.findByPk(id);

            if (!blague) {
                return res.status(404).json({
                    success: false,
                    message: 'Blague non trouv√©e'
                });
            }

            // La m√©thode 'destroy' supprime la ligne de la base de donn√©es.
            await blague.destroy();

            console.log('‚úÖ Blague supprim√©e avec succ√®s');
            res.json({
                success: true,
                message: 'Blague supprim√©e avec succ√®s'
            });
        } catch (error) {
            console.error('‚ùå Erreur lors de la suppression de la blague:', error);
            res.status(500).json({
                success: false,
                message: 'Erreur interne du serveur',
                error: error.message
            });
        }
    };

    // On retourne un objet contenant toutes nos fonctions pour que le fichier de routes puisse les utiliser.
    return {
        ajouterBlague,
        consulterToutesBlagues,
        consulterBlagueParId,
        consulterBlagueAleatoire,
        mettreAJourBlague,
        supprimerBlague
    };
}; 